;;
;; Names
;;

syntax char hint(desc "character") = U+0000 | ... | U+D7FF | U+E000 | ... | U+10FFFF

syntax name hint(desc "name") = char*

var nm : name


;;
;; Values
;;

syntax byte hint(desc "byte") = 0x00 | ... | 0xFF

;; TODO: make u(N), s(N), i(N)
syntax uN hint(desc "unsigned integer") = 0 | ... | 2^N-1
syntax sN hint(desc "signed integer") = -2^(N-1) | ... | -1 | 0 | +1 | ... | 2^(N-1)-1
syntax iN hint(desc "integer") = uN

;; TODO: use u(N), s(N)
syntax u31 hint(desc "31-bit integer") = 0 | ... | 2^31-1
syntax u32 hint(desc "32-bit integer") = 0 | ... | 2^32-1
syntax u64 hint(desc "64-bit integer") = 0 | ... | 2^64-1
syntax u128 hint(desc "128-bit integer") = 0 | ... | 2^128-1

var b : byte


def $signif(N) : nat
def $signif(32) = 23
def $signif(64) = 52

def $expon(N) : nat
def $expon(32) = 8
def $expon(64) = 11

def $M(N) : nat  hint(show $M_(%))
def $M(N) = $signif(N)

def $E(N) : nat  hint(show $E_(%))
def $E(N) = $expon(N)

;; TODO: make f(N), fmag(N)
syntax fN hint(desc "floating-point number") = | POS fNmag  hint(show $(+%)) | NEG fNmag  hint(show $(-%))

syntax fNmag hint(desc "floating-point magnitude") =
  | NORM m n     hint(show $((1 + %*2^(-$M(N))) * 2^%))  -- if $(2-2^($E(N)-1) <= n <= 2^($E(N)-1)-1)
  | SUBNORM m n  hint(show $((0 + %*2^(-$M(N))) * 2^%))  -- if $(2-2^($E(N)-1) = n)
  | INF          hint(show infinity)
  | NAN n        hint(show NAN#((%)))                    -- if $(1 <= n < $M(N))

;; TODO: use f(N)
def $fNzero : fN  hint(show $(+0))
def $fNzero = POS (NORM 0 0)

;; TODO: use f(N)
syntax f32 hint(desc "32-bit floating-point") = fN
syntax f64 hint(desc "64-bit floating-point") = fN

var p : fN
var q : fN


;;
;; Indices
;;

syntax idx hint(desc "index") = u32

syntax typeidx hint(desc "type index") = idx
syntax funcidx hint(desc "function index") = idx
syntax globalidx hint(desc "global index") = idx
syntax tableidx hint(desc "table index") = idx
syntax memidx hint(desc "memory index") = idx
syntax labelidx hint(desc "label index") = idx
syntax localidx hint(desc "local index") = idx

var x : idx
var y : idx
var l : labelidx


;; Types

syntax valtype hint(desc "number type") =
  | I32 | I64 | F32 | F64

syntax inn hint(show I#n) = | I32 | I64
syntax fnn hint(show F#n) = | F32 | F64

var t : valtype

syntax resulttype hint(desc "result type") =
  valtype?

syntax mut = MUT?

syntax limits hint(desc "limits") =
  `[u32 .. u32]
syntax globaltype hint(desc "global type") =
  mut valtype
syntax functype hint(desc "function type") =
  valtype* -> valtype*
syntax tabletype hint(desc "table type") =
  limits
syntax memtype hint(desc "memory type") =
  limits
syntax externtype hint(desc "external type") =
  | FUNC functype | GLOBAL globaltype | TABLE tabletype | MEM memtype

var lim : limits
var ft : functype
var gt : globaltype
var tt : tabletype
var mt : memtype
var xt : externtype


;; Operators

syntax sx hint(desc "signedness") = | U | S

syntax unop_IXX = | CLZ | CTZ | POPCNT
syntax unop_FXX = | ABS | NEG | SQRT | CEIL | FLOOR | TRUNC | NEAREST

syntax binop_IXX =
  | ADD | SUB | MUL | DIV sx hint(show DIV_#%) | REM sx hint(show REM_#%)
  | AND | OR | XOR | SHL | SHR sx hint(show SHR_#%) | ROTL | ROTR
syntax binop_FXX = | ADD | SUB | MUL | DIV | MIN | MAX | COPYSIGN

syntax testop_IXX = | EQZ
syntax testop_FXX = |      ;; uninhabited

syntax relop_IXX =
  | EQ | NE | LT sx hint(show LT_#%) | GT sx hint(show GT_#%) | LE sx hint(show LE_#%) | GE sx hint(show GE_#%)
syntax relop_FXX = | EQ | NE | LT | GT | LE | GE

syntax unop_valtype = | _I unop_IXX | _F unop_FXX
syntax binop_valtype = | _I binop_IXX | _F binop_FXX
syntax testop_valtype = | _I testop_IXX | _F testop_FXX
syntax relop_valtype = | _I relop_IXX | _F relop_FXX
syntax cvtop = | CONVERT | REINTERPRET

var unop : unop_valtype
var binop : binop_valtype
var testop : testop_valtype
var relop : relop_valtype


syntax memop hint(desc "memory operator") = {ALIGN u32, OFFSET u32}

var mo:memop


;; Instructions

;; TODO: do c(numtype)?
syntax c_valtype = nat  ;; TODO
var c : c_valtype

syntax blocktype hint(desc "block type") = valtype?

var bt : blocktype

syntax instr/control hint(desc "control instruction") =
  | UNREACHABLE
  | NOP
  | DROP
  | SELECT (valtype*)?
  | BLOCK blocktype instr*
  | LOOP blocktype instr*
  | IF blocktype instr* ELSE instr*
  | BR labelidx
  | BR_IF labelidx
  | BR_TABLE labelidx* labelidx
  | CALL funcidx
  | CALL_INDIRECT typeidx
  | RETURN
  | ...

syntax instr/numeric hint(desc "numeric instruction") = ...
  | CONST valtype c_valtype          hint(show %.CONST %)
  | UNOP valtype unop_valtype        hint(show %.%)
  | BINOP valtype binop_valtype      hint(show %.%)
  | TESTOP valtype testop_valtype    hint(show %.%)
  | RELOP valtype relop_valtype      hint(show %.%)
  | CVTOP valtype cvtop valtype sx?  hint(show %.%#_#%#_#%)
  | ...

syntax instr/local hint(desc "local instruction") = ...
  | LOCAL.GET localidx
  | LOCAL.SET localidx
  | LOCAL.TEE localidx
  | ...

syntax instr/global hint(desc "global instruction") = ...
  | GLOBAL.GET globalidx
  | GLOBAL.SET globalidx
  | ...

syntax instr/memory hint(desc "memory instruction") = ...
  | MEMORY.SIZE
  | MEMORY.GROW
  | LOAD valtype (n _ sx)? memop  hint(show %.LOAD % %)  hint(show %.LOAD#% %)
  | STORE valtype n? memop        hint(show %.STORE % %) hint(show %.STORE#% %)

syntax expr hint(desc "expression") =
  instr*

syntax instr hint(desc "instruction")

var in : instr
var e : expr


;; Modules

syntax type hint(desc "type") =
  TYPE functype
syntax local hint(desc "local") =
  LOCAL valtype
syntax func hint(desc "function") =
  FUNC typeidx local* expr
syntax global hint(desc "global") =
  GLOBAL globaltype expr
syntax table hint(desc "table") =
  TABLE tabletype
syntax mem hint(desc "memory") =
  MEMORY memtype
syntax elem hint(desc "table segment") =
  ELEM expr funcidx*
syntax data hint(desc "memory segment") =
  DATA expr byte*
syntax start hint(desc "start function") =
  START funcidx

syntax externidx hint(desc "external index") =
  | FUNC funcidx | GLOBAL globalidx | TABLE tableidx | MEM memidx
syntax export hint(desc "export") =
  EXPORT name externidx
syntax import hint(desc "import") =
  IMPORT name name externtype

syntax module hint(desc "module") =
  MODULE type* import* func* global* table* mem* elem* data* start* export*


var ty : type
var loc : local
var glob : global
var tab : table
var im : import
var ex : export
var st : start
var xx : externidx
