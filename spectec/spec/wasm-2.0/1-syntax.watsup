;;
;; Names
;;

syntax char hint(desc "character") = U+0000 | ... | U+D7FF | U+E000 | ... | U+10FFFF

syntax name hint(desc "name") = char*

var nm : name


;;
;; Values
;;

;; Integers

syntax byte hint(desc "byte") = 0x00 | ... | 0xFF

syntax uN(N) hint(desc "unsigned integer") = 0 | ... | 2^N-1
syntax sN(N) hint(desc "signed integer") = -2^(N-1) | ... | -1 | 0 | +1 | ... | 2^(N-1)-1
syntax iN(N) hint(desc "integer") = uN(N)

syntax u8 = uN(8)
syntax u31 = uN(31)
syntax u32 = uN(32)
syntax u64 = uN(64)
syntax u128 = uN(128)
syntax s33 = sN(33)

var b : byte


;; Floating-point

def $signif(N) : nat
def $signif(32) = 23
def $signif(64) = 52

def $expon(N) : nat
def $expon(32) = 8
def $expon(64) = 11

def $M(N) : nat  hint(show $M_(%))
def $M(N) = $signif(N)

def $E(N) : nat  hint(show $E_(%))
def $E(N) = $expon(N)

syntax fN(N) hint(desc "floating-point number") =
  | POS fmag(N)  hint(show $(+%))
  | NEG fmag(N)  hint(show $(-%))

syntax fmag(N) hint(desc "floating-point magnitude") =
  | NORM m n     hint(show $((1 + %*2^(-$M(N))) * 2^%))  -- if $(2-2^($E(N)-1) <= n <= 2^($E(N)-1)-1)
  | SUBNORM m n  hint(show $((0 + %*2^(-$M(N))) * 2^%))  -- if $(2-2^($E(N)-1) = n)
  | INF          hint(show infinity)
  | NAN n        hint(show NAN#((%)))                    -- if $(1 <= n < $M(N))

def $fzero(N) : fN(N)  hint(show $(+0))
def $fzero(N) = POS (NORM 0 0)

syntax f32 = fN(32)
syntax f64 = fN(64)


;;
;; Indices
;;

syntax idx hint(desc "index") = u32
syntax laneidx hint(desc "lane index") = u8

syntax typeidx hint(desc "type index") = idx
syntax funcidx hint(desc "function index") = idx
syntax globalidx hint(desc "global index") = idx
syntax tableidx hint(desc "table index") = idx
syntax memidx hint(desc "memory index") = idx
syntax elemidx hint(desc "elem index") = idx
syntax dataidx hint(desc "data index") = idx
syntax labelidx hint(desc "label index") = idx
syntax localidx hint(desc "local index") = idx

var x : idx
var y : idx
var l : labelidx
var x33 : s33 hint(show x)


;;
;; Types
;;

;; Value types

syntax numtype hint(desc "number type") =
  | I32 | I64 | F32 | F64

syntax vectype hint(desc "vector type") =
  | V128

syntax reftype hint(desc "reference type") =
  | FUNCREF | EXTERNREF

syntax valtype hint(desc "value type") =
  | numtype | vectype | reftype | BOT

syntax inn hint(show I#n) = | I32 | I64
syntax fnn hint(show F#n) = | F32 | F64


syntax resulttype hint(desc "result type") =
  valtype*


;; Type definitons

syntax packedtype = | I8 | I16


;; External types

syntax mut = MUT?

syntax limits hint(desc "limits") =
  `[u32 .. u32]

syntax globaltype hint(desc "global type") =
  mut valtype
syntax functype hint(desc "function type") =
  resulttype -> resulttype
syntax tabletype hint(desc "table type") =
  limits reftype
syntax memtype hint(desc "memory type") =
  limits I8
syntax elemtype hint(desc "element type") =
  reftype
syntax datatype hint(desc "data type") =
  OK
syntax externtype hint(desc "external type") =
  | FUNC functype | GLOBAL globaltype | TABLE tabletype | MEM memtype


;; Meta variables

var lim : limits

var t : valtype
var ft : functype
var gt : globaltype
var mt : memtype
var nt : numtype
var pt : packedtype
var rt : reftype
var tt : tabletype
var vt : vectype
var xt : externtype


;;
;; Operators
;;

;; Numeric operators

syntax sx hint(desc "signedness") = | U | S

syntax iunop = | CLZ | CTZ | POPCNT
syntax funop = | ABS | NEG | SQRT | CEIL | FLOOR | TRUNC | NEAREST

syntax ibinop =
  | ADD | SUB | MUL | DIV sx hint(show DIV_#%) | REM sx hint(show REM_#%)
  | AND | OR | XOR | SHL | SHR sx hint(show SHR_#%) | ROTL | ROTR
syntax fbinop = | ADD | SUB | MUL | DIV | MIN | MAX | COPYSIGN

syntax itestop = | EQZ
syntax ftestop = |      ;; uninhabited

syntax irelop =
  | EQ | NE | LT sx hint(show LT_#%) | GT sx hint(show GT_#%) | LE sx hint(show LE_#%) | GE sx hint(show GE_#%)
syntax frelop = | EQ | NE | LT | GT | LE | GE

;; TODO: type index
syntax unop_numtype = | _I iunop | _F funop
syntax binop_numtype = | _I ibinop | _F fbinop
syntax testop_numtype = | _I itestop ;; | _F ftestop
syntax relop_numtype = | _I irelop | _F frelop
syntax cvtop = | CONVERT | REINTERPRET | CONVERT_SAT

var unop : unop_numtype
var binop : binop_numtype
var testop : testop_numtype
var relop : relop_numtype


;; Vector operators

syntax unopVVXX = | NOT
syntax binopVVXX = | AND | ANDNOT | OR | XOR
syntax ternopVVXX = | BITSELECT
syntax testopVVXX = | ANY_TRUE
syntax testopVIXX = | ALL_TRUE
syntax relopVIXX = | EQ | NE | LT sx | GT sx | LE sx | GE sx
syntax relopVFXX = | EQ | NE | LT | GT | LE | GE
syntax unopVIXX = | ABS | NEG
syntax binopVIXX = | ADD | SUB
syntax minmaxopVIXX = | MIN sx | MAX sx
syntax satbinopVIXX = | ADD_SAT sx | SUB_SAT sx
syntax shiftopVIXX = | SHL | SHR sx
syntax unopVFXX = | ABS | NEG | SQRT | CEIL | FLOOR | TRUNC | NEAREST
syntax binopVFXX = | ADD | SUB | MUL | DIV | MIN | MAX | PMIN | PMAX

syntax viunop = | unopVIXX | POPCNT
syntax vibinop = | binopVIXX | minmaxopVIXX | satbinopVIXX | MUL | AVGR_U | Q15MULR_SAT_S

syntax unop_vvectype = | _VV unopVVXX
syntax binop_vvectype = | _VV binopVVXX
syntax ternop_vvectype = | _VV ternopVVXX
syntax testop_vvectype = | _VV testopVVXX

syntax shiftop_vectype = | _VI shiftopVIXX
syntax unop_vectype = | _VI viunop | _VF unopVFXX
syntax binop_vectype = | _VI vibinop | _VF binopVFXX
syntax testop_vectype = | _VI testopVIXX
syntax relop_vectype = | _VI relopVIXX | _VF relopVFXX
syntax cvtop_vectype = | EXTEND | TRUNC_SAT | CONVERT | DEMOTE | PROMOTE


var vvunop : unop_vvectype
var vvbinop : binop_vvectype
var vvternop : ternop_vvectype
var vvtestop : testop_vvectype

var vishiftop : shiftop_vectype
var vunop : unop_vectype
var vbinop : binop_vectype
var vtestop : testop_vectype
var vrelop : relop_vectype
var vcvtop : cvtop_vectype


;; Memory operators

syntax memop hint(desc "memory operator") = {ALIGN u32, OFFSET u32}

var mo : memop


;;
;; Instructions
;;

;; TODO: do c(numtype)?
syntax c = nat
syntax c_numtype = nat  ;; TODO
syntax c_vectype = nat  ;; TODO
var cv : c_vectype

syntax blocktype hint(desc "block type") =
  | _RESULT valtype?
  | _IDX funcidx

var bt : blocktype

syntax instr/control hint(desc "control instruction") =
  | UNREACHABLE
  | NOP
  | DROP
  | SELECT (valtype*)?
  | BLOCK blocktype instr*
  | LOOP blocktype instr*
  | IF blocktype instr* ELSE instr*
  | BR labelidx
  | BR_IF labelidx
  | BR_TABLE labelidx* labelidx
  | CALL funcidx
  | CALL_INDIRECT tableidx typeidx
  | RETURN
  | ...

syntax instr/numeric hint(desc "numeric instruction") = ...
  | CONST numtype c_numtype          hint(show %.CONST %)
  | UNOP numtype unop_numtype        hint(show %.%)
  | BINOP numtype binop_numtype      hint(show %.%)
  | TESTOP numtype testop_numtype    hint(show %.%)
  | RELOP numtype relop_numtype      hint(show %.%)
  | EXTEND numtype n                 hint(show %.EXTEND#%)
  | CVTOP numtype cvtop numtype sx?  hint(show %.%#_#%#_#%)
  | ...

syntax lanetype hint(desc "lane type") = | packedtype | numtype
syntax lanesize hint(desc "lane size") = nat
syntax shape hint(desc "shape") = lanetype X lanesize
syntax half = | LOW | HIGH
syntax zero = ZERO?

var lnt : lanetype
var lns : lanesize
var sh : shape
var hf : half

syntax instr/vector hint(desc "vector instruction") = ...
  | VVCONST vectype c_vectype                                 hint(show %.CONST %)
  | VVUNOP vectype unop_vvectype                              hint(show %.%)
  | VVBINOP vectype binop_vvectype                            hint(show %.%)
  | VVTERNOP vectype ternop_vvectype                          hint(show %.%)
  | VVTESTOP vectype testop_vvectype                          hint(show %.%)
  | VSWIZZLE shape                                            hint(show %.VSWIZZLE)
  | VSHUFFLE shape laneidx*                                   hint(show %.VSHUFFLE %)
  | VSPLAT shape                                              hint(show %.VSPLAT)
  | VEXTRACT_LANE shape sx? laneidx                           hint(show %.VEXTRACT#_#LANE#_#% %)
  | VREPLACE_LANE shape laneidx                               hint(show %.VREPLACE#_#LANE %)
  | VUNOP shape unop_vectype                                  hint(show %.%)
  | VBINOP shape binop_vectype                                hint(show %.%)
  | VRELOP shape relop_vectype                                hint(show %.%)
  | VISHIFTOP shape shiftop_vectype                           hint(show %.%)
  | VALL_TRUE shape                                           hint(show %.VALL_TRUE)
  | VBITMASK shape                                            hint(show %.VBITMASK)
  | VNARROW shape shape sx                                    hint(show %.VNARROW#_#%#_#%)
  | VCVTOP shape cvtop_vectype half? shape sx? zero           hint(show %.%#_#%#_#%#_#%) hint(show %.%#_#%#_#%#_#%) hint(show %.%#_#%#_#%#_#%#_#%)
  | VEXTMUL shape half shape sx                               hint(show %.VEXTMUL#_#%#_#%#_#%)
  | VDOT shape shape sx                                       hint(show %.VDOT#_#%#_#%)
  | VEXTADD_PAIRWISE shape shape sx                           hint(show %.VEXTADD_PAIRWISE#_#%#_#%)
  | ...


syntax instr/reference hint(desc "reference instruction") = ...
  | REF.NULL reftype
  | REF.FUNC funcidx
  | REF.IS_NULL
  | ...

syntax instr/local hint(desc "local instruction") = ...
  | LOCAL.GET localidx
  | LOCAL.SET localidx
  | LOCAL.TEE localidx
  | ...

syntax instr/global hint(desc "global instruction") = ...
  | GLOBAL.GET globalidx
  | GLOBAL.SET globalidx
  | ...

syntax instr/table hint(desc "table instruction") = ...
  | TABLE.GET tableidx
  | TABLE.SET tableidx
  | TABLE.SIZE tableidx
  | TABLE.GROW tableidx
  | TABLE.FILL tableidx
  | TABLE.COPY tableidx tableidx
  | TABLE.INIT tableidx elemidx
  | ELEM.DROP elemidx
  | ...


syntax packshape = nat X nat
syntax vloadop =
  | SHAPE packshape sx  hint(show %#_#%)
  | SPLAT nat           hint(show %#_#SPLAT)
  | ZERO nat            hint(show %#_#ZERO)

syntax instr/memory hint(desc "memory instruction") = ...
  | MEMORY.SIZE
  | MEMORY.GROW
  | MEMORY.FILL
  | MEMORY.COPY
  | MEMORY.INIT dataidx
  | DATA.DROP dataidx
  | LOAD numtype (n _ sx)? memop  hint(show %.LOAD % %)  hint(show %.LOAD#% %)
  | STORE numtype n? memop        hint(show %.STORE % %) hint(show %.STORE#% %)
  | VLOAD vloadop? memop          hint(show V128.LOAD %) hint(show V128.LOAD#% %)
  | VLOAD_LANE n memop laneidx    hint(show V128.LOAD#%#_#LANE % %)
  | VSTORE memop                  hint(show V128.STORE %)
  | VSTORE_LANE n memop laneidx   hint(show V128.STORE#%#_#LANE % %)

syntax expr hint(desc "expression") =
  instr*

syntax instr hint(desc "instruction")

var in : instr
var e : expr


;;
;; Modules
;;

syntax elemmode = | ACTIVE tableidx expr | PASSIVE | DECLARE
syntax datamode = | ACTIVE memidx expr | PASSIVE

syntax type hint(desc "type") =
  TYPE functype
syntax local hint(desc "local") =
  LOCAL valtype
syntax func hint(desc "function") =
  FUNC typeidx local* expr
syntax global hint(desc "global") =
  GLOBAL globaltype expr
syntax table hint(desc "table") =
  TABLE tabletype
syntax mem hint(desc "memory") =
  MEMORY memtype
syntax elem hint(desc "table segment") =
  ELEM reftype expr* elemmode
syntax data hint(desc "memory segment") =
  DATA byte* datamode
syntax start hint(desc "start function") =
  START funcidx

syntax externidx hint(desc "external index") =
  | FUNC funcidx | GLOBAL globalidx | TABLE tableidx | MEM memidx
syntax export hint(desc "export") =
  EXPORT name externidx
syntax import hint(desc "import") =
  IMPORT name name externtype

syntax module hint(desc "module") =
  MODULE type* import* func* global* table* mem* elem* data* start? export*


var ty : type
var loc : local
var glob : global
var tab : table
var im : import
var ex : export
var st : start
var xx : externidx
