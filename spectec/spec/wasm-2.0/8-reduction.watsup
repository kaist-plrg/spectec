;;
;; Configurations
;;

relation Step: config ~> config                 hint(show "E")
relation Step_pure: admininstr* ~> admininstr*  hint(show "E")
relation Step_read: config ~> admininstr*       hint(show "E")
relation Steps: config ~>* config               hint(show "E")

rule Step/pure:
  z; instr*  ~>  z; instr'*
  -- Step_pure: instr* ~> instr'*

rule Step/read:
  z; instr*  ~>  z; instr'*
  -- Step_read: z; instr* ~> instr'*

rule Steps/refl:
  z; admininstr* ~>* z; admininstr*

rule Steps/trans:
  z; admininstr*  ~>*  z''; admininstr''*
  -- Step: z; admininstr*  ~>  z'; admininstr'*
  -- Steps: z'; admininstr'  ~>*  z''; admininstr''*


;; Expressions

relation Eval_expr: state; expr ~>* state; val*  hint(show "E-expr")

rule Eval_expr:
  z; instr*  ~>*  z'; val*
  -- Steps: z; instr*  ~>*  z'; val*


;;
;; Instructions
;;

;; Polymorphic instructions

rule Step_pure/unreachable:
  UNREACHABLE  ~>  TRAP

rule Step_pure/nop:
  NOP  ~>  eps

rule Step_pure/drop:
  val DROP  ~>  eps


rule Step_pure/select-true:
  val_1 val_2 (CONST I32 c) (SELECT t*?)  ~>  val_1
  -- if c =/= 0

rule Step_pure/select-false:
  val_1 val_2 (CONST I32 c) (SELECT t*?)  ~>  val_2
  -- if c = 0


;; Block instructions

def $blocktype(state, blocktype) : functype  hint(show $blocktype_(%,%))
def $blocktype(z, _RESULT eps) = eps -> eps
def $blocktype(z, _RESULT t) = eps -> t
def $blocktype(z, _IDX x) = $type(z, x)

rule Step_read/block:
  z; val^k (BLOCK bt instr*)  ~>  (LABEL_ n `{eps} val^k instr*)
  -- if $blocktype(z, bt) = t_1^k -> t_2^n

rule Step_read/loop:
  z; val^k (LOOP bt instr*)  ~>  (LABEL_ k `{LOOP bt instr*} val^k instr*)
  -- if $blocktype(z, bt) = t_1^k -> t_2^n

rule Step_pure/if-true:
  (CONST I32 c) (IF bt instr_1* ELSE instr_2*)  ~>  (BLOCK bt instr_1*)
  -- if c =/= 0

rule Step_pure/if-false:
  (CONST I32 c) (IF bt instr_1* ELSE instr_2*)  ~>  (BLOCK bt instr_2*)
  -- if c = 0


rule Step_pure/label-vals:
  (LABEL_ n `{instr*} val*)  ~>  val*


;; Branch instructions

;; TODO: may want a label context instead of bubbling up
rule Step_pure/br-zero:
  (LABEL_ n `{instr'*} val'* val^n (BR 0) instr*)  ~>  val^n instr'*

rule Step_pure/br-succ:
  (LABEL_ n `{instr'*} val* (BR $(l+1)) instr*)  ~>  val* (BR l)


rule Step_pure/br_if-true:
  (CONST I32 c) (BR_IF l)  ~>  (BR l)
  -- if c =/= 0

rule Step_pure/br_if-false:
  (CONST I32 c) (BR_IF l)  ~>  eps
  -- if c = 0


rule Step_pure/br_table-lt:
  (CONST I32 i) (BR_TABLE l* l')  ~>  (BR l*[i])
  -- if i < |l*|

rule Step_pure/br_table-ge:
  (CONST I32 i) (BR_TABLE l* l')  ~>  (BR l')
  -- if i >= |l*|


;; Function instructions

rule Step_read/call:
  z; (CALL x)  ~>  (CALL_ADDR $funcaddr(z)[x])  ;; TODO

rule Step_read/call_indirect-call:
  z; (CONST I32 i) (CALL_INDIRECT x y)  ~>  (CALL_ADDR a)
  -- if $table(z, x).ELEM[i] = (REF.FUNC_ADDR a)
  -- if $type(z, y) = $funcinst(z)[a].TYPE

rule Step_read/call_indirect-trap:
  z; (CONST I32 i) (CALL_INDIRECT x y)  ~>  TRAP
  -- otherwise

rule Step_read/call_addr:
  z; val^k (CALL_ADDR a)  ~>  (FRAME_ n `{f} (LABEL_ n `{eps} instr*))
  -- if $funcinst(z)[a] = {TYPE (t_1^k -> t_2^n), MODULE mm, CODE func}
  -- if func = FUNC x (LOCAL t)* instr*
  -- if f = {LOCAL val^k ($default(t))*, MODULE mm}


rule Step_pure/frame-vals:
  (FRAME_ n `{f} val^n)  ~>  val^n

rule Step_pure/return-frame:
  (FRAME_ n `{f} val'* val^n RETURN instr*)  ~>  val^n

rule Step_pure/return-label:
  (LABEL_ k `{instr'*} val* RETURN instr*)  ~>  val* RETURN


;; Numeric instructions

rule Step_pure/unop-val:
  (CONST nt c_1) (UNOP nt unop)  ~>  (CONST nt c)
  -- if $unop(unop, nt, c_1) = c  ;; TODO

rule Step_pure/unop-trap:
  (CONST nt c_1) (UNOP nt unop)  ~>  TRAP
  -- if $unop(unop, nt, c_1) = eps  ;; TODO


rule Step_pure/binop-val:
  (CONST nt c_1) (CONST nt c_2) (BINOP nt binop)  ~>  (CONST nt c)
  -- if $binop(binop, nt, c_1, c_2) = c  ;; TODO

rule Step_pure/binop-trap:
  (CONST nt c_1) (CONST nt c_2) (BINOP nt binop)  ~>  TRAP
  -- if $binop(binop, nt, c_1, c_2) = eps  ;; TODO


rule Step_pure/testop:
  (CONST nt c_1) (TESTOP nt testop)  ~>  (CONST I32 c)
  -- if c = $testop(testop, nt, c_1)

rule Step_pure/relop:
  (CONST nt c_1) (CONST nt c_2) (RELOP nt relop)  ~>  (CONST I32 c)
  -- if c = $relop(relop, nt, c_1, c_2)


rule Step_pure/extend:
  (CONST nt c) (EXTEND nt n)  ~>  (CONST nt $ext(n, $size(nt), S, c))


rule Step_pure/cvtop-val:
  (CONST nt_1 c_1) (CVTOP nt_2 cvtop nt_1 sx?)  ~>  (CONST nt_2 c)
  -- if $cvtop(cvtop, nt_1, nt_2, sx?, c_1) = c  ;; TODO

rule Step_pure/cvtop-trap:
  (CONST nt_1 c_1) (CVTOP nt_2 cvtop nt_1 sx?)  ~>  TRAP
  -- if $cvtop(cvtop, nt_1, nt_2, sx?, c_1) = eps  ;; TODO


;; Reference instructions

rule Step_read/ref.func:
  z; (REF.FUNC x) ~> (REF.FUNC_ADDR $funcaddr(z)[x])


rule Step_pure/ref.is_null-true:
  val REF.IS_NULL  ~>  (CONST I32 1)
  -- if val = (REF.NULL rt)

rule Step_pure/ref.is_null-false:
  val REF.IS_NULL  ~>  (CONST I32 0)
  -- otherwise


;; Vector instructions

rule Step_pure/vvunop:
  (VVCONST V128 cv_1) (VVUNOP V128 vvunop)  ~>  (VVCONST V128 cv)
  -- if $vvunop(vvunop, V128, cv_1) = cv ;; TODO


rule Step_pure/vvbinop:
  (VVCONST V128 cv_1) (VVCONST V128 cv_2) (VVBINOP V128 vvbinop)  ~>  (VVCONST V128 cv)
  -- if $vvbinop(vvbinop, V128, cv_1, cv_2) = cv ;; TODO


rule Step_pure/vvternop:
  (VVCONST V128 cv_1) (VVCONST V128 cv_2) (VVCONST V128 cv_3) (VVTERNOP V128 vvternop)  ~>  (VVCONST V128 cv)
  -- if $vvternop(vvternop, V128, cv_1, cv_2, cv_3) = cv ;; TODO


rule Step_pure/vvtestop:
  (VVCONST V128 cv_1) (VVTESTOP V128 (_VV ANY_TRUE)) ~> (CONST I32 i)
  -- if i = $ine(128, cv_1, $vzero)


rule Step_pure/vswizzle:
  (VVCONST V128 cv_1) (VVCONST V128 cv_2) (VSWIZZLE sh) ~> (VVCONST V128 cv')
  -- if sh = lnt X lns
  -- if i* = $lanes(sh, cv_2)
  -- if c* = $lanes(sh, cv_1) 0^(256 - lns)
  -- if $lanes(sh, cv') = c*[$(i*[k])]^(k<lns)


rule Step_pure/vshuffle:
  (VVCONST V128 cv_1) (VVCONST V128 cv_2) (VSHUFFLE sh laneidx*) ~> (VVCONST V128 cv)
  -- if sh = lnt X lns
  -- if i* = $lanes(sh, cv_1) $lanes(sh, cv_2)
  -- if $lanes(sh, cv) = i*[$(laneidx*[k])]^(k<lns)


rule Step_pure/vsplat:
  (CONST nt c_1) (VSPLAT sh) ~> (VVCONST V128 cv)
  -- if nt = $unpacked(sh)
  -- if $lanes(sh, cv) = c_1^$dim(sh)


rule Step_pure/vextract_lane-num:
  (VVCONST V128 cv_1) (VEXTRACT_LANE sh laneidx) ~> (CONST nt c_2)
  -- if nt = $unpacked(sh)
  -- if sh = lnt X lns
  -- if c_2 = $ext($lanesize(lnt), $size(nt), U, $lanes(sh, cv_1)[laneidx])

rule Step_pure/vextract_lane-pack:
  (VVCONST V128 cv_1) (VEXTRACT_LANE sh sx laneidx) ~> (CONST nt c_2)
  -- if nt = $unpacked(sh)
  -- if sh = lnt X lns
  -- if c_2 = $ext($lanesize(lnt), $size(nt), sx, $lanes(sh, cv_1)[laneidx])


rule Step_pure/vreplace_lane:
  (VVCONST V128 cv_1) (CONST nt c_2) (VREPLACE_LANE sh laneidx) ~> (VVCONST V128 cv)
  -- if i* = $lanes(sh, cv_1)
  -- if $lanes(sh, cv) = (i*)[[laneidx] = c_2]


rule Step_pure/vunop:
  (VVCONST V128 cv_1) (VUNOP sh vunop)  ~>  (VVCONST V128 cv)
  -- if cv = $vunop(vunop, sh, cv_1)


rule Step_pure/vbinop-val:
  (VVCONST V128 cv_1) (VVCONST V128 cv_2) (VBINOP sh vbinop)  ~>  (VVCONST V128 cv)
  -- if $vbinop(vbinop, sh, cv_1, cv_2) = cv

rule Step_pure/vbinop-trap:
  (VVCONST V128 cv_1) (VVCONST V128 cv_2) (VBINOP sh vbinop)  ~>  TRAP
  -- if $vbinop(vbinop, sh, cv_1, cv_2) = eps


rule Step_pure/vrelop:
  (VVCONST V128 cv_1) (VVCONST V128 cv_2) (VRELOP sh vrelop)  ~>  (VVCONST V128 cv)
  -- if i* = $lanes(sh, cv_1)
  -- if j* = $lanes(sh, cv_2)
  -- if sh = lnt X lns
  -- if $lanes(sh, cv) = $ext(1, $lanesize(lnt), S, $vrelop(vrelop, sh, i, j))*


rule Step_pure/vishiftop:
  (VVCONST V128 cv_1) (CONST I32 n) (VISHIFTOP sh vishiftop) ~> (VVCONST V128 cv)
  -- if sh = lnt X lns
  -- if i* = $lanes(sh, cv_1)
  -- if $lanes(sh, cv) = $vishiftop(vishiftop, lnt, i, n)*


rule Step_pure/vall_true-true:
  (VVCONST V128 cv) (VALL_TRUE sh) ~> (CONST I32 1)
  -- if i_1* = $lanes(sh, cv)
  -- (if $(i_1 =/= 0))*

rule Step_pure/vall_true-false:
  (VVCONST V128 cv) (VALL_TRUE sh) ~> (CONST I32 0)
  -- otherwise


rule Step_pure/vbitmask:
  (VVCONST V128 cv) (VBITMASK sh) ~> (CONST I32 i)
  -- if sh = lnt X lns
  -- if i_1^lns = $lanes(sh, cv)
  -- if $ibits(32, i) = $ilt(S, $lanesize(lnt), i_1, 0)^lns


rule Step_pure/vnarrow:
  (VVCONST V128 cv_1) (VVCONST V128 cv_2) (VNARROW sh_2 sh_1 sx) ~> (VVCONST V128 cv)
  -- if sh_1 = lnt_1 X lns_1
  -- if sh_2 = lnt_2 X lns_2
  -- if i_1^lns_1 = $lanes(sh_1, cv_1)
  -- if i_2^lns_1 = $lanes(sh_1, cv_2)
  -- if n_1^lns_1 = $narrow($lanesize(lnt_1), $lanesize(lnt_2), sx, i_1)^lns_1
  -- if n_2^lns_1 = $narrow($lanesize(lnt_1), $lanesize(lnt_2), sx, i_2)^lns_1
  -- if $lanes(sh_2, cv) = n_1^lns_1 n_2^lns_1


rule Step_pure/vcvtop-normal:
  (VVCONST V128 cv_1) (VCVTOP sh_2 vcvtop eps sh_1 sx eps) ~> (VVCONST V128 cv)
  -- if sh_1 = lnt_1 X lns_1
  -- if sh_2 = lnt_2 X lns_2
  -- if i* = $lanes(sh_1, cv_1)
  -- if $lanes(sh_2, cv) = $vcvtop(vcvtop, $lanesize(lnt_1), $lanesize(lnt_2), sx, i)*


rule Step_pure/vcvtop-half:
  (VVCONST V128 cv_1) (VCVTOP sh_2 vcvtop hf sh_1 sx? eps) ~> (VVCONST V128 cv)
  -- if sh_1 = lnt_1 X lns_1
  -- if sh_2 = lnt_2 X lns_2
  -- if i* = $lanes(sh_1, cv_1)[$halfop(hf, 0, lns_2) : lns_2]
  -- if $lanes(sh_2, cv) = $vcvtop(vcvtop, $lanesize(lnt_1), $lanesize(lnt_2), sx?, i)*


rule Step_pure/vcvtop-zero:
  (VVCONST V128 cv_1) (VCVTOP sh_2 vcvtop eps sh_1 sx? ZERO) ~> (VVCONST V128 cv)
  -- if sh_1 = lnt_1 X lns_1
  -- if sh_2 = lnt_2 X lns_2
  -- if i* = $lanes(sh_1, cv_1)
  -- if $lanes(sh_2, cv) = $vcvtop(vcvtop, $lanesize(lnt_1), $lanesize(lnt_2), sx?, i)* 0^lns_1


rule Step_pure/vdot:
  (VVCONST V128 cv_1) (VVCONST V128 cv_2) (VDOT sh_1 sh_2 S) ~> (VVCONST V128 cv)
  -- if sh_1 = lnt_1 X lns_1
  -- if sh_2 = lnt_2 X lns_2
  -- if i_1 = $lanesize(lnt_1)
  -- if i_2 = $lanesize(lnt_2)
  -- if k_1^k' = $lanes(sh_2, cv_1)
  -- if k_2^k' = $lanes(sh_2, cv_2)
  -- if $concat_bytes((j_1 j_2)*) = $imul(i_1, $ext(i_2, i_1, S, k_1), $ext(i_2, i_1, S, k_2))^k'
  -- if j'* = $iadd(i_1, j_1, j_2)*
  -- if $lanes(sh_1, cv) = j'*


rule Step_pure/vextmul:
  (VVCONST V128 cv_1) (VVCONST V128 cv_2) (VEXTMUL sh_2 hf sh_1 sx) ~> (VVCONST V128 cv)
  -- if sh_1 = lnt_1 X lns_1
  -- if sh_2 = lnt_2 X lns_2
  -- if i^k = $lanes(sh_1, cv_1)[$halfop(hf, 0, lns_2) : lns_2]
  -- if j^k = $lanes(sh_1, cv_2)[$halfop(hf, 0, lns_2) : lns_2]
  -- if $lanes(sh_2, cv) = $imul($lanesize(lnt_2), $ext($lanesize(lnt_1), $lanesize(lnt_2), sx, i), $ext($lanesize(lnt_1), $lanesize(lnt_2), sx, j))^k


rule Step_pure/vextadd_pairwise:
  (VVCONST V128 cv_1) (VEXTADD_PAIRWISE sh_2 sh_1 sx) ~> (VVCONST V128 cv)
  -- if sh_1 = lnt_1 X lns_1
  -- if sh_2 = lnt_2 X lns_2
  -- if i^k = $lanes(sh_1, cv_1)
  -- if $concat_bytes((i_1 i_2)*) = $ext($lanesize(lnt_1), $lanesize(lnt_2), sx, i)^k
  -- if j* = $iadd($lanesize(lnt_2), i_1, i_2)*
  -- if $lanes(sh_2, cv) = j*



;; Local instructions

rule Step_read/local.get:
  z; (LOCAL.GET x)  ~>  $local(z, x)

rule Step/local.set:
  z; val (LOCAL.SET x)  ~>  $with_local(z, x, val); eps

rule Step_pure/local.tee:
  val (LOCAL.TEE x)  ~>  val val (LOCAL.SET x)


;; Global instructions

rule Step_read/global.get:
  z; (GLOBAL.GET x)  ~>  $global(z, x).VALUE

rule Step/global.set:
  z; val (GLOBAL.SET x)  ~>  $with_global(z, x, val); eps


;; Table instructions

rule Step_read/table.get-trap:
  z; (CONST I32 i) (TABLE.GET x)  ~>  TRAP
  -- if i >= |$table(z, x).ELEM|

rule Step_read/table.get-val:
  z; (CONST I32 i) (TABLE.GET x)  ~>  $table(z,x).ELEM[i]
  -- if i < |$table(z, x).ELEM|

rule Step/table.set-trap:
  z; (CONST I32 i) ref (TABLE.SET x)  ~>  z; TRAP
  -- if i >= |$table(z, x).ELEM|

rule Step/table.set-val:
  z; (CONST I32 i) ref (TABLE.SET x)  ~>  $with_table(z, x, i, ref); eps
  -- if i < |$table(z, x).ELEM|


rule Step_read/table.size:
  z; (TABLE.SIZE x)  ~>  (CONST I32 n)
  -- if |$table(z, x).ELEM| = n  ;; TODO: inline this


rule Step/table.grow-succeed:
  z; ref (CONST I32 n) (TABLE.GROW x)  ~>  $with_tableinst(z, x, ti); (CONST I32 $(|$table(z, x).ELEM|))
  -- if $growtable($table(z, x), n, ref) = ti

rule Step/table.grow-fail:
  z; ref (CONST I32 n) (TABLE.GROW x)  ~>  z; (CONST I32 $invsigned(32, $(-1)))


rule Step_read/table.fill-trap:
  z; (CONST I32 i) val (CONST I32 n) (TABLE.FILL x)  ~>  TRAP
  -- if $(i + n) > |$table(z, x).ELEM|

rule Step_read/table.fill-zero:
  z; (CONST I32 i) val (CONST I32 n) (TABLE.FILL x)  ~>  eps
  -- otherwise
  -- if n = 0

rule Step_read/table.fill-succ:
  z; (CONST I32 i) val (CONST I32 n) (TABLE.FILL x)  ~>
    (CONST I32 i) val (TABLE.SET x)
    (CONST I32 $(i+1)) val (CONST I32 $(n-1)) (TABLE.FILL x)
  -- otherwise


rule Step_read/table.copy-trap:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (TABLE.COPY x y)  ~>  TRAP
  -- if $(i + n) > |$table(z, y).ELEM| \/ $(j + n) > |$table(z, x).ELEM|

rule Step_read/table.copy-zero:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (TABLE.COPY x y)  ~>  eps
  -- otherwise
  -- if n = 0

rule Step_read/table.copy-le:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (TABLE.COPY x y)  ~>
    (CONST I32 j) (CONST I32 i) (TABLE.GET y) (TABLE.SET x)
    (CONST I32 $(j+1)) (CONST I32 $(i+1)) (CONST I32 $(n-1)) (TABLE.COPY x y)
  -- otherwise
  -- if j <= i

rule Step_read/table.copy-gt:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (TABLE.COPY x y)  ~>
    (CONST I32 $(j+n-1)) (CONST I32 $(i+n-1)) (TABLE.GET y) (TABLE.SET x)
    (CONST I32 j) (CONST I32 i) (CONST I32 $(n-1)) (TABLE.COPY x y)
  -- otherwise


rule Step_read/table.init-trap:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (TABLE.INIT x y)  ~>  TRAP
  -- if $(i + n) > |$elem(z, y).ELEM| \/ $(j + n) > |$table(z, x).ELEM|

rule Step_read/table.init-zero:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (TABLE.INIT x y)  ~>  eps
  -- otherwise
  -- if n = 0

rule Step_read/table.init-succ:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (TABLE.INIT x y)  ~>
    (CONST I32 j) $elem(z,y).ELEM[i] (TABLE.SET x)
    (CONST I32 $(j+1)) (CONST I32 $(i+1)) (CONST I32 $(n-1)) (TABLE.INIT x y)
  -- otherwise


rule Step/elem.drop:
  z; (ELEM.DROP x)  ~>  $with_elem(z, x, eps); eps


;; Memory instructions

rule Step_read/load-num-trap:
  z; (CONST I32 i) (LOAD nt mo)  ~>  TRAP
  -- if $(i + mo.OFFSET + $size(nt)/8 > |$mem(z, 0).DATA|)

rule Step_read/load-num-val:
  z; (CONST I32 i) (LOAD nt mo)  ~>  (CONST nt c)
  -- if $ntbytes(nt, c) = $mem(z, 0).DATA[i + mo.OFFSET : $size(nt)/8]

rule Step_read/load-pack-trap:
  z; (CONST I32 i) (LOAD nt (n _ sx) mo)  ~>  TRAP
  -- if $(i + mo.OFFSET + n/8 > |$mem(z, 0).DATA|)

rule Step_read/load-pack-val:
  z; (CONST I32 i) (LOAD nt (n _ sx) mo)  ~>  (CONST nt $ext(n, $size(nt), sx, c))
  -- if $ibytes(n, c) = $mem(z, 0).DATA[i + mo.OFFSET : n/8]

rule Step_read/vload-oob:
  z; (CONST I32 i) (VLOAD mo)  ~>  TRAP
  -- if $(i + mo.OFFSET + $size(V128)/8 > |$mem(z, 0).DATA|)

rule Step_read/vload-val:
  z; (CONST I32 i) (VLOAD mo)  ~>  (VVCONST V128 cv)
  -- if $vtbytes(V128, cv) = $mem(z, 0).DATA[i + mo.OFFSET : $size(V128)/8]

rule Step_read/vload-shape-oob:
  z; (CONST I32 i) (VLOAD (SHAPE (M X N) sx) mo)  ~>  TRAP
  -- if $(i + mo.OFFSET + M * N/8) > |$mem(z, 0).DATA|

rule Step_read/vload-shape-val:
  z; (CONST I32 i) (VLOAD (SHAPE (M X N) sx) mo)  ~>  (VVCONST V128 cv)
  -- (if $ibytes(M, m) = $mem(z, 0).DATA[i + mo.OFFSET + k * M/8 : M/8])^(k<N)
  -- if $lanes($ishape($(M * 2)) X N, cv) = $ext(M, $(M * 2), sx, m)^N

rule Step_read/vload-splat-oob:
  z; (CONST I32 i) (VLOAD (SPLAT n) mo)  ~>  TRAP
  -- if $(i + mo.OFFSET + n/8) > |$mem(z, 0).DATA|

rule Step_read/vload-splat-val:
  z; (CONST I32 i) (VLOAD (SPLAT n) mo)  ~>  (VVCONST V128 cv)
  -- if $ibytes(n, m) = $mem(z, 0).DATA[i + mo.OFFSET : n/8]
  -- if l = $(128/n)
  -- if $lanes($ishape(n) X l, cv) = m^l

rule Step_read/vload-zero-oob:
  z; (CONST I32 i) (VLOAD (ZERO n) mo)  ~>  TRAP
  -- if $(i + mo.OFFSET + n/8) > |$mem(z, 0).DATA|

rule Step_read/vload-zero-val:
  z; (CONST I32 i) (VLOAD (ZERO n) mo)  ~>  (VVCONST V128 cv)
  -- if $ibytes(n, c) = $mem(z, 0).DATA[i + mo.OFFSET : n/8]
  -- if cv = $ext(128, n, U, c)

rule Step_read/vload_lane-oob:
  z; (CONST I32 i) (VVCONST V128 cv_1) (VLOAD_LANE n mo laneidx)  ~>  TRAP
  -- if $(i + mo.OFFSET + n/8 > |$mem(z, 0).DATA|)

rule Step_read/vload_lane-val:
  z; (CONST I32 i) (VVCONST V128 cv_1) (VLOAD_LANE n mo laneidx)  ~>  (VVCONST V128 cv)
  -- if $ibytes(n, m) = $mem(z, 0).DATA[i + mo.OFFSET : n/8]
  -- if sh = $ishape(n) X $(128/n)
  -- if $lanes(sh, cv) = $lanes(sh, cv_1)[[laneidx] = m]


rule Step/store-num-trap:
  z; (CONST I32 i) (CONST nt c) (STORE nt mo)  ~>  z; TRAP
  -- if $(i + mo.OFFSET + $size(nt)/8) > |$mem(z, 0).DATA|

rule Step/store-num-val:
  z; (CONST I32 i) (CONST nt c) (STORE nt mo)  ~>  $with_mem(z, 0, $(i + mo.OFFSET), $($size(nt)/8), b*); eps
  -- if b* = $ntbytes(nt, c)

rule Step/store-pack-trap:
  z; (CONST I32 i) (CONST nt c) (STORE nt n mo)  ~>  z; TRAP
  -- if $(i + mo.OFFSET + n/8) > |$mem(z, 0).DATA|

rule Step/store-pack-val:
  z; (CONST I32 i) (CONST nt c) (STORE nt n mo)  ~>  $with_mem(z, 0, $(i + mo.OFFSET), $(n/8), b*); eps
  -- if b* = $ibytes(n, $wrap($size(nt), n, c))

rule Step/vstore-oob:
  z; (CONST I32 i) (VVCONST V128 cv) (VSTORE mo)  ~>  z; TRAP
  -- if $(i + mo.OFFSET + $size(V128)/8) > |$mem(z, 0).DATA|

rule Step/vstore-val:
  z; (CONST I32 i) (VVCONST V128 cv) (VSTORE mo)  ~>  $with_mem(z, 0, $(i + mo.OFFSET), $($size(V128)/8), b*); eps
  -- if b* = $vtbytes(V128, cv)

rule Step/vstore_lane-oob:
  z; (CONST I32 i) (VVCONST V128 cv) (VSTORE_LANE n mo laneidx)  ~>  z; TRAP
  -- if $(i + mo.OFFSET + n) > |$mem(z, 0).DATA|

rule Step/vstore_lane-val:
  z; (CONST I32 i) (VVCONST V128 cv) (VSTORE_LANE n mo laneidx)  ~>  $with_mem(z, 0, $(i + mo.OFFSET), $(n/8), b*); eps
  -- if b* = $ibytes(n, $lanes($ishape(n) X $(128/n), cv)[laneidx])


rule Step_read/memory.size:
  z; (MEMORY.SIZE)  ~>  (CONST I32 n)
  -- if $(n * 64 * $Ki) = |$mem(z, 0).DATA|


rule Step/memory.grow-succeed:
  z; (CONST I32 n) (MEMORY.GROW)  ~>  $with_meminst(z, 0, mi); (CONST I32 $(|$mem(z, 0).DATA| / (64 * $Ki)))
  -- if $growmemory($mem(z, 0), n) = mi

rule Step/memory.grow-fail:
  z; (CONST I32 n) (MEMORY.GROW)  ~>  z; (CONST I32 $invsigned(32, $(-1)))


rule Step_read/memory.fill-trap:
  z; (CONST I32 i) val (CONST I32 n) (MEMORY.FILL)  ~>  TRAP
  -- if $(i + n) > |$mem(z, 0).DATA|

rule Step_read/memory.fill-zero:
  z; (CONST I32 i) val (CONST I32 n) (MEMORY.FILL)  ~>  eps
  -- otherwise
  -- if n = 0

rule Step_read/memory.fill-succ:
  z; (CONST I32 i) val (CONST I32 n) (MEMORY.FILL)  ~>
    (CONST I32 i) val (STORE I32 8 $memop0)
    (CONST I32 $(i+1)) val (CONST I32 $(n-1)) (MEMORY.FILL)
  -- otherwise


rule Step_read/memory.copy-trap:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (MEMORY.COPY)  ~>  TRAP
  -- if $(i + n) > |$mem(z, 0).DATA| \/ $(j + n) > |$mem(z, 0).DATA|

rule Step_read/memory.copy-zero:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (MEMORY.COPY)  ~>  eps
  -- otherwise
  -- if n = 0

rule Step_read/memory.copy-le:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (MEMORY.COPY)  ~>
    (CONST I32 j) (CONST I32 i) (LOAD I32 (8 _ U) $memop0) (STORE I32 8 $memop0)
    (CONST I32 $(j+1)) (CONST I32 $(i+1)) (CONST I32 $(n-1)) (MEMORY.COPY)
  -- otherwise
  -- if j <= i

rule Step_read/memory.copy-gt:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (MEMORY.COPY)  ~>
    (CONST I32 $(j+n-1)) (CONST I32 $(i+n-1)) (LOAD I32 (8 _ U) $memop0) (STORE I32 8 $memop0)
    (CONST I32 j) (CONST I32 i) (CONST I32 $(n-1)) (MEMORY.COPY)
  -- otherwise


rule Step_read/memory.init-trap:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (MEMORY.INIT x)  ~>  TRAP
  -- if $(i + n) > |$data(z, x).DATA| \/ $(j + n) > |$mem(z, 0).DATA|

rule Step_read/memory.init-zero:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (MEMORY.INIT x)  ~>  eps
  -- otherwise
  -- if n = 0

rule Step_read/memory.init-succ:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (MEMORY.INIT x)  ~>
    (CONST I32 j) (CONST I32 $data(z,x).DATA[i]) (STORE I32 8 $memop0)
    (CONST I32 $(j+1)) (CONST I32 $(i+1)) (CONST I32 $(n-1)) (MEMORY.INIT x)
  -- otherwise


rule Step/data.drop:
  z; (DATA.DROP x)  ~>  $with_data(z, x, eps); eps
