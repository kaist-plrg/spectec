;;
;; Configurations
;;

relation Step: config ~> config                 hint(show "E")
relation Step_pure: admininstr* ~> admininstr*  hint(show "E")
relation Step_read: config ~> admininstr*       hint(show "E")
relation Steps: config ~>* config               hint(show "E")

rule Step/pure:
  z; instr*  ~>  z; instr'*
  -- Step_pure: instr* ~> instr'*

rule Step/read:
  z; instr*  ~>  z; instr'*
  -- Step_read: z; instr* ~> instr'*

rule Steps/refl:
  z; admininstr* ~>* z; admininstr*

rule Steps/trans:
  z; admininstr*  ~>*  z''; admininstr''*
  -- Step: z; admininstr*  ~>  z'; admininstr'*
  -- Steps: z'; admininstr'  ~>*  z''; admininstr''*


;; Expressions

relation Eval_expr: state; expr ~>* state; val*  hint(show "E-expr")

rule Eval_expr:
  z; instr*  ~>*  z'; val*
  -- Steps: z; instr*  ~>*  z'; val*


;;
;; Instructions
;;

;; Polymorphic instructions

rule Step_pure/unreachable:
  UNREACHABLE  ~>  TRAP

rule Step_pure/nop:
  NOP  ~>  epsilon

rule Step_pure/drop:
  val DROP  ~>  epsilon


rule Step_pure/select-true:
  val_1 val_2 (CONST I32 c) (SELECT t*?)  ~>  val_1
  -- if c =/= 0

rule Step_pure/select-false:
  val_1 val_2 (CONST I32 c) (SELECT t*?)  ~>  val_2
  -- if c = 0


;; Block instructions

def $blocktype(state, blocktype) : functype  hint(show $blocktype_(%,%))
def $blocktype(z, _RESULT epsilon) = epsilon -> epsilon
def $blocktype(z, _RESULT t) = epsilon -> t
def $blocktype(z, _IDX x) = $type(z, x)

rule Step_read/block:
  z; val^k (BLOCK bt instr*)  ~>  (LABEL_ n `{epsilon} val^k instr*)
  -- if $blocktype(z, bt) = t_1^k -> t_2^n

rule Step_read/loop:
  z; val^k (LOOP bt instr*)  ~>  (LABEL_ k `{LOOP bt instr*} val^k instr*)
  -- if $blocktype(z, bt) = t_1^k -> t_2^n

rule Step_pure/if-true:
  (CONST I32 c) (IF bt instr_1* ELSE instr_2*)  ~>  (BLOCK bt instr_1*)
  -- if c =/= 0

rule Step_pure/if-false:
  (CONST I32 c) (IF bt instr_1* ELSE instr_2*)  ~>  (BLOCK bt instr_2*)
  -- if c = 0


rule Step_pure/label-vals:
  (LABEL_ n `{instr*} val*)  ~>  val*


;; Branch instructions

;; TODO: may want a label context instead of bubbling up
rule Step_pure/br-zero:
  (LABEL_ n `{instr'*} val'* val^n (BR 0) instr*)  ~>  val^n instr'*

rule Step_pure/br-succ:
  (LABEL_ n `{instr'*} val* (BR $(l+1)) instr*)  ~>  val* (BR l)


rule Step_pure/br_if-true:
  (CONST I32 c) (BR_IF l)  ~>  (BR l)
  -- if c =/= 0

rule Step_pure/br_if-false:
  (CONST I32 c) (BR_IF l)  ~>  epsilon
  -- if c = 0


rule Step_pure/br_table-lt:
  (CONST I32 i) (BR_TABLE l* l')  ~>  (BR l*[i])
  -- if i < |l*|

rule Step_pure/br_table-ge:
  (CONST I32 i) (BR_TABLE l* l')  ~>  (BR l')
  -- if i >= |l*|


;; Function instructions

rule Step_read/call:
  z; (CALL x)  ~>  (CALL_ADDR $funcaddr(z)[x])  ;; TODO

rule Step_read/call_indirect-call:
  z; (CONST I32 i) (CALL_INDIRECT x y)  ~>  (CALL_ADDR a)
  -- if $table(z, x).ELEM[i] = (REF.FUNC_ADDR a)
  -- if $type(z, y) = $funcinst(z)[a].TYPE

rule Step_read/call_indirect-trap:
  z; (CONST I32 i) (CALL_INDIRECT x y)  ~>  TRAP
  -- otherwise

rule Step_read/call_addr:
  z; val^k (CALL_ADDR a)  ~>  (FRAME_ n `{f} (LABEL_ n `{epsilon} instr*))
  -- if $funcinst(z)[a] = {TYPE (t_1^k -> t_2^n), MODULE mm, CODE func}
  -- if func = FUNC x (LOCAL t)* instr*
  -- if f = {LOCAL val^k ($default(t))*, MODULE mm}


rule Step_pure/frame-vals:
  (FRAME_ n `{f} val^n)  ~>  val^n

rule Step_pure/return-frame:
  (FRAME_ n `{f} val'* val^n RETURN instr*)  ~>  val^n

rule Step_pure/return-label:
  (LABEL_ k `{instr'*} val* RETURN instr*)  ~>  val* RETURN


;; Numeric instructions

rule Step_pure/unop-val:
  (CONST nt c_1) (UNOP nt unop)  ~>  (CONST nt c)
  -- if $unop(unop, nt, c_1) = c  ;; TODO

rule Step_pure/unop-trap:
  (CONST nt c_1) (UNOP nt unop)  ~>  TRAP
  -- if $unop(unop, nt, c_1) = epsilon  ;; TODO


rule Step_pure/binop-val:
  (CONST nt c_1) (CONST nt c_2) (BINOP nt binop)  ~>  (CONST nt c)
  -- if $binop(binop, nt, c_1, c_2) = c  ;; TODO

rule Step_pure/binop-trap:
  (CONST nt c_1) (CONST nt c_2) (BINOP nt binop)  ~>  TRAP
  -- if $binop(binop, nt, c_1, c_2) = epsilon  ;; TODO


rule Step_pure/testop:
  (CONST nt c_1) (TESTOP nt testop)  ~>  (CONST I32 c)
  -- if c = $testop(testop, nt, c_1)

rule Step_pure/relop:
  (CONST nt c_1) (CONST nt c_2) (RELOP nt relop)  ~>  (CONST I32 c)
  -- if c = $relop(relop, nt, c_1, c_2)


rule Step_pure/extend:
  (CONST nt c) (EXTEND nt n)  ~>  (CONST nt $ext(n, $size(nt), S, c))


rule Step_pure/cvtop-val:
  (CONST nt_1 c_1) (CVTOP nt_2 cvtop nt_1 sx?)  ~>  (CONST nt_2 c)
  -- if $cvtop(cvtop, nt_1, nt_2, sx?, c_1) = c  ;; TODO

rule Step_pure/cvtop-trap:
  (CONST nt_1 c_1) (CVTOP nt_2 cvtop nt_1 sx?)  ~>  TRAP
  -- if $cvtop(cvtop, nt_1, nt_2, sx?, c_1) = epsilon  ;; TODO


;; Reference instructions

rule Step_read/ref.func:
  z; (REF.FUNC x) ~> (REF.FUNC_ADDR $funcaddr(z)[x])


rule Step_pure/ref.is_null-true:
  val REF.IS_NULL  ~>  (CONST I32 1)
  -- if val = (REF.NULL rt)

rule Step_pure/ref.is_null-false:
  val REF.IS_NULL  ~>  (CONST I32 0)
  -- otherwise


;; Local instructions

rule Step_read/local.get:
  z; (LOCAL.GET x)  ~>  $local(z, x)

rule Step/local.set:
  z; val (LOCAL.SET x)  ~>  $with_local(z, x, val); epsilon

rule Step_pure/local.tee:
  val (LOCAL.TEE x)  ~>  val val (LOCAL.SET x)


;; Global instructions

rule Step_read/global.get:
  z; (GLOBAL.GET x)  ~>  $global(z, x).VALUE

rule Step/global.set:
  z; val (GLOBAL.SET x)  ~>  $with_global(z, x, val); epsilon


;; Table instructions

rule Step_read/table.get-trap:
  z; (CONST I32 i) (TABLE.GET x)  ~>  TRAP
  -- if i >= |$table(z, x).ELEM|

rule Step_read/table.get-val:
  z; (CONST I32 i) (TABLE.GET x)  ~>  $table(z,x).ELEM[i]
  -- if i < |$table(z, x).ELEM|

rule Step/table.set-trap:
  z; (CONST I32 i) ref (TABLE.SET x)  ~>  z; TRAP
  -- if i >= |$table(z, x).ELEM|

rule Step/table.set-val:
  z; (CONST I32 i) ref (TABLE.SET x)  ~>  $with_table(z, x, i, ref); epsilon
  -- if i < |$table(z, x).ELEM|


rule Step_read/table.size:
  z; (TABLE.SIZE x)  ~>  (CONST I32 n)
  -- if |$table(z, x).ELEM| = n  ;; TODO: inline this


rule Step/table.grow-succeed:
  z; ref (CONST I32 n) (TABLE.GROW x)  ~>  $with_tableinst(z, x, ti); (CONST I32 $(|$table(z, x).ELEM|))
  -- if $growtable($table(z, x), n, ref) = ti

rule Step/table.grow-fail:
  z; ref (CONST I32 n) (TABLE.GROW x)  ~>  z; (CONST I32 $invsigned(32, $(-1)))


rule Step_read/table.fill-trap:
  z; (CONST I32 i) val (CONST I32 n) (TABLE.FILL x)  ~>  TRAP
  -- if $(i + n) > |$table(z, x).ELEM|

rule Step_read/table.fill-zero:
  z; (CONST I32 i) val (CONST I32 n) (TABLE.FILL x)  ~>  epsilon
  -- otherwise
  -- if n = 0

rule Step_read/table.fill-succ:
  z; (CONST I32 i) val (CONST I32 n) (TABLE.FILL x)  ~>
    (CONST I32 i) val (TABLE.SET x)
    (CONST I32 $(i+1)) val (CONST I32 $(n-1)) (TABLE.FILL x)
  -- otherwise


rule Step_read/table.copy-trap:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (TABLE.COPY x y)  ~>  TRAP
  -- if $(i + n) > |$table(z, y).ELEM| \/ $(j + n) > |$table(z, x).ELEM|

rule Step_read/table.copy-zero:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (TABLE.COPY x y)  ~>  epsilon
  -- otherwise
  -- if n = 0

rule Step_read/table.copy-le:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (TABLE.COPY x y)  ~>
    (CONST I32 j) (CONST I32 i) (TABLE.GET y) (TABLE.SET x)
    (CONST I32 $(j+1)) (CONST I32 $(i+1)) (CONST I32 $(n-1)) (TABLE.COPY x y)
  -- otherwise
  -- if j <= i

rule Step_read/table.copy-gt:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (TABLE.COPY x y)  ~>
    (CONST I32 $(j+n-1)) (CONST I32 $(i+n-1)) (TABLE.GET y) (TABLE.SET x)
    (CONST I32 j) (CONST I32 i) (CONST I32 $(n-1)) (TABLE.COPY x y)
  -- otherwise


rule Step_read/table.init-trap:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (TABLE.INIT x y)  ~>  TRAP
  -- if $(i + n) > |$elem(z, y).ELEM| \/ $(j + n) > |$table(z, x).ELEM|

rule Step_read/table.init-zero:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (TABLE.INIT x y)  ~>  epsilon
  -- otherwise
  -- if n = 0

rule Step_read/table.init-succ:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (TABLE.INIT x y)  ~>
    (CONST I32 j) $elem(z,y).ELEM[i] (TABLE.SET x)
    (CONST I32 $(j+1)) (CONST I32 $(i+1)) (CONST I32 $(n-1)) (TABLE.INIT x y)
  -- otherwise


rule Step/elem.drop:
  z; (ELEM.DROP x)  ~>  $with_elem(z, x, epsilon); epsilon


;; Memory instructions

rule Step_read/load-num-trap:
  z; (CONST I32 i) (LOAD nt mo)  ~>  TRAP
  -- if $(i + mo.OFFSET + $size(nt)/8 > |$mem(z, 0).DATA|)

rule Step_read/load-num-val:
  z; (CONST I32 i) (LOAD nt mo)  ~>  (CONST nt c)
  -- if $ntbytes(nt, c) = $mem(z, 0).DATA[i + mo.OFFSET : $size(nt)/8]

rule Step_read/load-pack-trap:
  z; (CONST I32 i) (LOAD nt (n _ sx) mo)  ~>  TRAP
  -- if $(i + mo.OFFSET + n/8 > |$mem(z, 0).DATA|)

rule Step_read/load-pack-val:
  z; (CONST I32 i) (LOAD nt (n _ sx) mo)  ~>  (CONST nt $ext(n, $size(nt), sx, c))
  -- if $ibytes(n, c) = $mem(z, 0).DATA[i + mo.OFFSET : n/8]


rule Step/store-num-trap:
  z; (CONST I32 i) (CONST nt c) (STORE nt mo)  ~>  z; TRAP
  -- if $(i + mo.OFFSET + $size(nt)/8) > |$mem(z, 0).DATA|

rule Step/store-num-val:
  z; (CONST I32 i) (CONST nt c) (STORE nt mo)  ~>  $with_mem(z, 0, $(i + mo.OFFSET), $($size(nt)/8), b*); epsilon
  -- if b* = $ntbytes(nt, c)

rule Step/store-pack-trap:
  z; (CONST I32 i) (CONST nt c) (STORE nt n mo)  ~>  z; TRAP
  -- if $(i + mo.OFFSET + n/8) > |$mem(z, 0).DATA|

rule Step/store-pack-val:
  z; (CONST I32 i) (CONST nt c) (STORE nt n mo)  ~>  $with_mem(z, 0, $(i + mo.OFFSET), $(n/8), b*); epsilon
  -- if b* = $ibytes(n, $wrap($size(nt), n, c))


rule Step_read/memory.size:
  z; (MEMORY.SIZE)  ~>  (CONST I32 n)
  -- if $(n * 64 * $Ki) = |$mem(z, 0).DATA|


rule Step/memory.grow-succeed:
  z; (CONST I32 n) (MEMORY.GROW)  ~>  $with_meminst(z, 0, mi); (CONST I32 $(|$mem(z, 0).DATA| / (64 * $Ki)))
  -- if $growmemory($mem(z, 0), n) = mi

rule Step/memory.grow-fail:
  z; (CONST I32 n) (MEMORY.GROW)  ~>  z; (CONST I32 $invsigned(32, $(-1)))


rule Step_read/memory.fill-trap:
  z; (CONST I32 i) val (CONST I32 n) (MEMORY.FILL)  ~>  TRAP
  -- if $(i + n) > |$mem(z, 0).DATA|

rule Step_read/memory.fill-zero:
  z; (CONST I32 i) val (CONST I32 n) (MEMORY.FILL)  ~>  epsilon
  -- otherwise
  -- if n = 0

rule Step_read/memory.fill-succ:
  z; (CONST I32 i) val (CONST I32 n) (MEMORY.FILL)  ~>
    (CONST I32 i) val (STORE I32 8 $memop0)
    (CONST I32 $(i+1)) val (CONST I32 $(n-1)) (MEMORY.FILL)
  -- otherwise


rule Step_read/memory.copy-trap:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (MEMORY.COPY)  ~>  TRAP
  -- if $(i + n) > |$mem(z, 0).DATA| \/ $(j + n) > |$mem(z, 0).DATA|

rule Step_read/memory.copy-zero:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (MEMORY.COPY)  ~>  epsilon
  -- otherwise
  -- if n = 0

rule Step_read/memory.copy-le:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (MEMORY.COPY)  ~>
    (CONST I32 j) (CONST I32 i) (LOAD I32 (8 _ U) $memop0) (STORE I32 8 $memop0)
    (CONST I32 $(j+1)) (CONST I32 $(i+1)) (CONST I32 $(n-1)) (MEMORY.COPY)
  -- otherwise
  -- if j <= i

rule Step_read/memory.copy-gt:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (MEMORY.COPY)  ~>
    (CONST I32 $(j+n-1)) (CONST I32 $(i+n-1)) (LOAD I32 (8 _ U) $memop0) (STORE I32 8 $memop0)
    (CONST I32 j) (CONST I32 i) (CONST I32 $(n-1)) (MEMORY.COPY)
  -- otherwise


rule Step_read/memory.init-trap:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (MEMORY.INIT x)  ~>  TRAP
  -- if $(i + n) > |$data(z, x).DATA| \/ $(j + n) > |$mem(z, 0).DATA|

rule Step_read/memory.init-zero:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (MEMORY.INIT x)  ~>  epsilon
  -- otherwise
  -- if n = 0

rule Step_read/memory.init-succ:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (MEMORY.INIT x)  ~>
    (CONST I32 j) (CONST I32 $data(z,x).DATA[i]) (STORE I32 8 $memop0)
    (CONST I32 $(j+1)) (CONST I32 $(i+1)) (CONST I32 $(n-1)) (MEMORY.INIT x)
  -- otherwise


rule Step/data.drop:
  z; (DATA.DROP x)  ~>  $with_data(z, x, epsilon); epsilon
