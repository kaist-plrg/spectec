;;
;; Names
;;

syntax char hint(desc "character") = U+0000 | ... | U+D7FF | U+E000 | ... | U+10FFFF

syntax name hint(desc "name") = char*

var nm : name


;;
;; Values
;;

;; Integers

syntax byte hint(desc "byte") = 0x00 | ... | 0xFF

syntax uN(N) hint(desc "unsigned integer") = 0 | ... | 2^N-1
syntax sN(N) hint(desc "signed integer") = -2^(N-1) | ... | -1 | 0 | +1 | ... | 2^(N-1)-1
syntax iN(N) hint(desc "integer") = uN(N)

syntax u8 = uN(8)
syntax u31 = uN(31)
syntax u32 = uN(32)
syntax u64 = uN(64)
syntax u128 = uN(128)
syntax s33 = sN(33)

var b : byte


;; Floating-point

def $signif(N) : nat
def $signif(32) = 23
def $signif(64) = 52

def $expon(N) : nat
def $expon(32) = 8
def $expon(64) = 11

def $M(N) : nat  hint(show $M_(%))
def $M(N) = $signif(N)

def $E(N) : nat  hint(show $E_(%))
def $E(N) = $expon(N)

syntax fN(N) hint(desc "floating-point number") =
  | POS fmag(N)  hint(show $(+%))
  | NEG fmag(N)  hint(show $(-%))

syntax fmag(N) hint(desc "floating-point magnitude") =
  | NORM m n     hint(show $((1 + %*2^(-$M(N))) * 2^%))  -- if $(2-2^($E(N)-1) <= n <= 2^($E(N)-1)-1)
  | SUBNORM m n  hint(show $((0 + %*2^(-$M(N))) * 2^%))  -- if $(2-2^($E(N)-1) = n)
  | INF          hint(show infinity)
  | NAN n        hint(show NAN#((%)))                    -- if $(1 <= n < $M(N))

def $fzero(N) : fN(N)  hint(show $(+0))
def $fzero(N) = POS (NORM 0 0)

syntax f32 = fN(32)
syntax f64 = fN(64)


;;
;; Indices
;;

syntax idx hint(desc "index") = u32
syntax laneidx hint(desc "lane index") = u8

syntax typeidx hint(desc "type index") = idx
syntax funcidx hint(desc "function index") = idx
syntax localidx hint(desc "local index") = idx

var x : idx
var y : idx
var x33 : s33 hint(show x)


;;
;; Types
;;

;; Value types

syntax numtype hint(desc "number type") =
  | I32 | I64 | F32 | F64

syntax vectype hint(desc "vector type") =
  | V128

syntax valtype hint(desc "value type") =
  | numtype | vectype

syntax inn hint(show I#n) = | I32 | I64
syntax fnn hint(show F#n) = | F32 | F64


syntax resulttype hint(desc "result type") =
  valtype*


;; Type definitons

syntax packedtype = | I8 | I16


;; External types

syntax functype hint(desc "function type") =
  resulttype -> resulttype
syntax externtype hint(desc "external type") =
  FUNC functype


;; Meta variables

var t : valtype
var ft : functype
var nt : numtype
var pt : packedtype
var vt : vectype
var xt : externtype


;;
;; Operators
;;

;; Numeric operators

syntax sx hint(desc "signedness") = | U | S

syntax iunop = | CLZ | CTZ | POPCNT
syntax funop = | ABS | NEG | SQRT | CEIL | FLOOR | TRUNC | NEAREST

syntax ibinop =
  | ADD | SUB | MUL | DIV sx hint(show DIV_#%) | REM sx hint(show REM_#%)
  | AND | OR | XOR | SHL | SHR sx hint(show SHR_#%) | ROTL | ROTR
syntax fbinop = | ADD | SUB | MUL | DIV | MIN | MAX | COPYSIGN

syntax itestop = | EQZ
syntax ftestop = |      ;; uninhabited

syntax irelop =
  | EQ | NE | LT sx hint(show LT_#%) | GT sx hint(show GT_#%) | LE sx hint(show LE_#%) | GE sx hint(show GE_#%)
syntax frelop = | EQ | NE | LT | GT | LE | GE

;; TODO: type index
syntax unop_numtype = | _I iunop | _F funop
syntax binop_numtype = | _I ibinop | _F fbinop
syntax testop_numtype = | _I itestop ;; | _F ftestop
syntax relop_numtype = | _I irelop | _F frelop
syntax cvtop = | CONVERT | REINTERPRET | CONVERT_SAT

var unop : unop_numtype
var binop : binop_numtype
var testop : testop_numtype
var relop : relop_numtype


;;
;; Instructions
;;

;; TODO: do c(numtype)?
syntax c = nat
syntax c_numtype = nat  ;; TODO

syntax blocktype hint(desc "block type") =
  | _RESULT valtype?
  | _IDX funcidx

var bt : blocktype

syntax instr/numeric hint(desc "numeric instruction") =
  | CONST numtype c_numtype          hint(show %.CONST %)
  | UNOP numtype unop_numtype        hint(show %.%)
  | BINOP numtype binop_numtype      hint(show %.%)
  | TESTOP numtype testop_numtype    hint(show %.%)
  | RELOP numtype relop_numtype      hint(show %.%)
  | EXTEND numtype n                 hint(show %.EXTEND#%)
  | CVTOP numtype cvtop numtype sx?  hint(show %.%#_#%#_#%)
  | SELECT (valtype*)?

syntax expr hint(desc "expression") =
  instr*

syntax instr hint(desc "instruction")

var in : instr
var e : expr


;;
;; Modules
;;

;; HACK
syntax empty = nat*
syntax none = nat?


syntax type hint(desc "type") =
  TYPE functype
syntax local hint(desc "local") =
  LOCAL valtype
syntax func hint(desc "function") =
  FUNC typeidx local* expr

syntax externidx hint(desc "external index") =
  FUNC funcidx
syntax export hint(desc "export") =
  EXPORT name externidx

syntax module hint(desc "module") =
  MODULE type* empty func* empty empty empty empty empty none export*


var ty : type
var loc : local
var ex : export
var xx : externidx
